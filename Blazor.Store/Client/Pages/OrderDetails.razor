@page "/orderDetails"
@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject IClientService ClientService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<p>@Message</p>

@if (productCategories != null && Order != null)
{
    
     <EditForm Model="@Order" OnValidSubmit="SaveOrder">

         <div class="card">
             <h5 class="card-header">Order Details</h5>
             <div class="card-body">
                 <div class="container">
                     <div class="row">
                         <div class="col-md-4 mb-3">

                         </div>

                         <div class="col-md-4 mb-3">
                             <input type="submit" class="btn btn-success" value="Save"/>
                              <input type="submit" class="btn btn-secondary" value="Cancel" onclick="Cancel"/>
                         </div>

                         <div class="col-md-4 mb-3">

                         </div>

                     </div>


                     <div class="row">
                         <div class="col-md-6 mb-3">
                             <label for="">Number</label>
                             <InputNumber class="form-control" @bind-Value="@Order.OrderNumber" />

                         </div>

                         <div class="col-md-6 mb-3">
                             <label for="">Order Date</label>
                             <InputDate class="form-control" @bind-Value="@Order.OrderDate" />
                         </div>
                     </div>

                     <div class="row">
                         
                         <div class="col-md-12 mb-3">
                             <label for="">Client</label>
                             <InputSelect class="form-control" @bind-Value="@Order.ClientId">
                                 @foreach(var item in clients)
                                 {
                                    <option value=@item.Id>@(item.LastName + ", " + item.FirstName)</option>
                                 }
                        </InputSelect>
                         </div>
                     </div>

                     <div class="row">
                         <div class="col-md-6 mb-3">
                             <label for="">Delivery Date</label>
                             <InputDate class="form-control" @bind-Value="@Order.DeliveryDate" />

                         </div>

                         <div class="col-md-6 mb-3">
                             <label for="">Total</label>
                             <InputNumber class="form-control" @bind-Value="@Order.Total" />
                         </div>
                     </div>




                 </div>
             </div>


         </div>



         <label>Categories</label>
        <InputSelect class="form-control col-sm-5" 
            Value="@Order.ProductCategoryId"
            ValueChanged="@((int productCategoryId)=> ProductCategoryHasChanged(productCategoryId))"
            ValueExpression="@(() => Order.ProductCategoryId)"
        >
           @foreach (var item in productCategories)
           {
                <option value ="@item.Id">@item.Name</option>    
           }
        </InputSelect>

        <label>Products</label>
        <InputSelect class="form-control col-sm-5" @bind-Value="@productId">
           @foreach (var item in products)
           {
                <option value ="@item.Id">@item.Name</option>    
           }
        </InputSelect>

    </EditForm>

}

else
{

    <p>@Message ...</p>
}


@code {

    public Order Order;
    public IEnumerable<ProductCategory> productCategories;
    public IEnumerable<Product> products;
    public IEnumerable<Client> clients;
    public int productId { get; set; }
    public string Message { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            Order = new Order() { 
                ProductCategoryId = 1,
                OrderDate = DateTime.Today,
                DeliveryDate = DateTime.Today.AddDays(7)
            };

            productCategories = await ProductCategoryService.GetProductCategories();
            await LoadProducts(Order.ProductCategoryId);

            clients = await ClientService.GetAll();
        }
        catch (Exception e)
        {
            Message = "There was an error..." + e.Message;
        }
    }

    protected async Task ProductCategoryHasChanged(int productCategoryId)
    {
        Order.ProductCategoryId = productCategoryId;

        if (Order.ProductCategoryId > 0)
            await LoadProducts(Order.ProductCategoryId);
    } 

    private async Task LoadProducts(int productCategoryId)
    {
        products = await ProductService.GetByCategory(productCategoryId);
    }

    protected async Task SaveOrder()
    {
        await OrderService.SaveOrder(Order);
        NavigateToHome();
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigateToHome();
    }

}
